/*
 * Anakha's Book Store
 * Hey there!<br>   Looking for some interesting books to read?<br>   Then this is the right place for u.   Have a good read!   
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.40
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Book} from '../model/Book';

/**
* Book service.
* @module api/BookApi
* @version 1.0.11
*/
export class BookApi {

    /**
    * Constructs a new BookApi. 
    * @alias module:api/BookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addPet operation.
     * @callback moduleapi/BookApi~addPetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Book{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new book to the store
     * Add a new book to the store
     * @param {module:model/Book} body Create a new book in the store
     * @param {Number} ID 
     * @param {String} title 
     * @param {String} author 
     * @param {String} publisher 
     * @param {String} ISBN 
     * @param {String} pubdate 
     * @param {Number} nopg 
     * @param {String} genre 
     * @param {module:api/BookApi~addPetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addPet(body, ID, title, author, publisher, ISBN, pubdate, nopg, genre, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPet");
      }
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling addPet");
      }
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling addPet");
      }
      // verify the required parameter 'author' is set
      if (author === undefined || author === null) {
        throw new Error("Missing the required parameter 'author' when calling addPet");
      }
      // verify the required parameter 'publisher' is set
      if (publisher === undefined || publisher === null) {
        throw new Error("Missing the required parameter 'publisher' when calling addPet");
      }
      // verify the required parameter 'ISBN' is set
      if (ISBN === undefined || ISBN === null) {
        throw new Error("Missing the required parameter 'ISBN' when calling addPet");
      }
      // verify the required parameter 'pubdate' is set
      if (pubdate === undefined || pubdate === null) {
        throw new Error("Missing the required parameter 'pubdate' when calling addPet");
      }
      // verify the required parameter 'nopg' is set
      if (nopg === undefined || nopg === null) {
        throw new Error("Missing the required parameter 'nopg' when calling addPet");
      }
      // verify the required parameter 'genre' is set
      if (genre === undefined || genre === null) {
        throw new Error("Missing the required parameter 'genre' when calling addPet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'ID': ID,'title': title,'author': author,'publisher': publisher,'ISBN': ISBN,'pubdate': pubdate,'nopg': nopg,'genre': genre
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Book;

      return this.apiClient.callApi(
        '/book', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePet operation.
     * @callback moduleapi/BookApi~deletePetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a book
     * delete a book
     * @param {Number} bookId book id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/BookApi~deletePetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePet(bookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling deletePet");
      }

      let pathParams = {
        'bookId': bookId
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/book/{bookId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the findPetsByStatus operation.
     * @callback moduleapi/BookApi~findPetsByStatusCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Book>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find book
     * Multiple status values can be provided with comma separated strings
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status Status values that need to be considered for filter (default to <.>)
     * @param {module:api/BookApi~findPetsByStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    findPetsByStatus(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'status': opts['status']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Book];

      return this.apiClient.callApi(
        '/book/find', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPetById operation.
     * @callback moduleapi/BookApi~getPetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Book{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find book by ID
     * Returns a single book
     * @param {Number} bookId ID of book to return
     * @param {module:api/BookApi~getPetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getPetById(bookId, callback) {
      
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling getPetById");
      }

      let pathParams = {
        'bookId': bookId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Book;

      return this.apiClient.callApi(
        '/book/{bookId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePet operation.
     * @callback moduleapi/BookApi~updatePetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Book{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update details of existing book
     * Update details of existing book by Id
     * @param {module:model/Book} body Update an existent book in the store
     * @param {Number} ID 
     * @param {String} title 
     * @param {String} author 
     * @param {String} publisher 
     * @param {String} ISBN 
     * @param {String} pubdate 
     * @param {Number} nopg 
     * @param {String} genre 
     * @param {module:api/BookApi~updatePetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updatePet(body, ID, title, author, publisher, ISBN, pubdate, nopg, genre, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePet");
      }
      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling updatePet");
      }
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling updatePet");
      }
      // verify the required parameter 'author' is set
      if (author === undefined || author === null) {
        throw new Error("Missing the required parameter 'author' when calling updatePet");
      }
      // verify the required parameter 'publisher' is set
      if (publisher === undefined || publisher === null) {
        throw new Error("Missing the required parameter 'publisher' when calling updatePet");
      }
      // verify the required parameter 'ISBN' is set
      if (ISBN === undefined || ISBN === null) {
        throw new Error("Missing the required parameter 'ISBN' when calling updatePet");
      }
      // verify the required parameter 'pubdate' is set
      if (pubdate === undefined || pubdate === null) {
        throw new Error("Missing the required parameter 'pubdate' when calling updatePet");
      }
      // verify the required parameter 'nopg' is set
      if (nopg === undefined || nopg === null) {
        throw new Error("Missing the required parameter 'nopg' when calling updatePet");
      }
      // verify the required parameter 'genre' is set
      if (genre === undefined || genre === null) {
        throw new Error("Missing the required parameter 'genre' when calling updatePet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'ID': ID,'title': title,'author': author,'publisher': publisher,'ISBN': ISBN,'pubdate': pubdate,'nopg': nopg,'genre': genre
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Book;

      return this.apiClient.callApi(
        '/book', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}